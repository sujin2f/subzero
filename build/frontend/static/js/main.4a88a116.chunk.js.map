{"version":3,"sources":["frontend/serviceWorker.ts","frontend/store/actions.ts","frontend/store/reducer.ts","frontend/store/index.tsx","frontend/hooks/index.ts","frontend/scenes/index.tsx","frontend/index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","error","TEST","initialState","test","reducer","action","type","Context","createContext","Store","children","useReducer","dispatch","Provider","value","useTest","useContext","useEffect","Public","props","ReactDOM","render","StrictMode","exact","path","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wMAYMA,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DAyCZ,SAASC,EAAgBC,EAAeC,GACpCC,UAAUC,cACLC,SAASJ,GACTK,MAAK,SAACC,GACHA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,YAIxBC,QAAQC,IACJ,iHAKAb,GAAUA,EAAOc,UACjBd,EAAOc,SAAST,KAMpBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACjBf,EAAOe,UAAUV,WA/B7C,OAsCW,SAACW,GACJJ,QAAQI,MAAM,4CAA6CA,M,kCC5F1DC,EAAO,gBCJPC,EAAsB,CAC/BC,MAAM,GAGGC,EAAU,WAAyD,IAAxDV,EAAuD,uDAAxCQ,EAAcG,EAA0B,uCAC3E,OAAQA,EAAOC,OACNL,EACM,2BACAP,GADP,IAEIS,MAAM,IAKHT,G,OCbNa,EAAUC,wBAAc,CAACN,EAAc,OAGvCO,EAAQ,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,SACpB,EAAuCC,qBAAWP,EAASF,GAA3D,mBAAOR,EAAP,KAAckB,EAAd,KACA,OACI,cAACL,EAAQM,SAAT,CAAkBC,MAAO,CAACpB,EAAOkB,GAAjC,SACKF,KCRAK,G,MAAU,WACnB,MAA6BC,qBAAWT,GAAxC,mBAASJ,EAAT,KAASA,KAAQS,EAAjB,KAUA,OARAK,qBAAU,WACFd,GAIJS,EHKG,CACHN,KAAML,MGLP,CAACW,EAAUT,IAEPA,ICJEe,EAAS,SAACC,GACnB,IAAMhB,EAAOY,IAEb,OACI,gCACI,8BAAMZ,EAAO,OAAS,UACtB,8BAAMgB,EAAMT,eCPxBU,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOC,OAAO,EAAMC,KAAK,IAAzB,mCAQpBC,SAASC,eAAe,SNDrB,SAAkB1C,GACrB,GAA6C,kBAAmBC,UAAW,CAMvE,GAJkB,IAAI0C,IAClBC,GACAlD,OAAOC,SAASkD,MAENC,SAAWpD,OAAOC,SAASmD,OAIrC,OAGJpD,OAAOqD,iBAAiB,QAAQ,WAC5B,IAAMhD,EAAK,UAAM6C,GAAN,sBAEPpD,IAgEhB,SAAiCO,EAAeC,GAE5CgD,MAAMjD,EAAO,CACTkD,QAAS,CAAE,iBAAkB,YAE5B7C,MAAK,SAAC8C,GAEH,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEjB,MAApBF,EAASG,QACO,MAAfF,IAC0C,IAAvCA,EAAYG,QAAQ,cAGxBrD,UAAUC,cAAcqD,MAAMnD,MAAK,SAACC,GAChCA,EAAamD,aAAapD,MAAK,WAC3BV,OAAOC,SAAS8D,eAKxB3D,EAAgBC,EAAOC,MAnBnC,OAsBW,WACHY,QAAQC,IACJ,oEAxFA6C,CAAwB3D,EAAOC,GAI/BC,UAAUC,cAAcqD,MAAMnD,MAAK,WAC/BQ,QAAQC,IACJ,iHAMRf,EAAgBC,EAAOC,OMxBvCE,K","file":"static/js/main.4a88a116.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n)\n\nexport function register(config?: any): void {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL as string,\n            window.location.href,\n        )\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: any) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: any) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            )\n        })\n}\n\nexport function unregister(): void {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","/**\n * Store actions\n * @module frontend\n */\n\nimport { Action } from 'src/types'\n\nexport const TEST = 'sujin/v1/TEST'\n\n/**\n * To set pageInfo\n *\n * @param {Partial<PageInfo>} pageInfo\n * @returns {Partial<Action>}\n */\nexport const setTest = (): Partial<Action> => {\n    return {\n        type: TEST,\n    }\n}\n","import { TEST } from 'src/frontend/store/actions'\nimport { Action, State } from 'src/types'\n\nexport const initialState: State = {\n    test: false,\n}\n\nexport const reducer = (state: State = initialState, action: Action): State => {\n    switch (action.type) {\n        case TEST: {\n            return {\n                ...state,\n                test: true,\n            }\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n","import React, { createContext, useReducer } from 'react'\nimport { reducer, initialState } from 'src/frontend/store/reducer'\nimport type { ReactChildrenProps, State } from 'src/types'\n\nexport const Context = createContext([initialState, null])\nexport type ContextType = [State, any]\n\nexport const Store = ({ children }: ReactChildrenProps): React.ReactElement => {\n    const [state, dispatch]: ContextType = useReducer(reducer, initialState)\n    return (\n        <Context.Provider value={[state, dispatch]}>\n            {children}\n        </Context.Provider>\n    )\n}\n\nexport { setTest } from 'src/frontend/store/actions'\n","import { useContext, useEffect } from 'react'\nimport { Context, ContextType, setTest } from 'src/frontend/store'\n\nexport const useTest = (): boolean => {\n    const [{ test }, dispatch] = useContext(Context) as ContextType\n\n    useEffect(() => {\n        if (test) {\n            return\n        }\n\n        dispatch(setTest())\n    }, [dispatch, test])\n\n    return test\n}\n","/*\n * Public Wrapper Component\n * scenes/public\n */\n\nimport React from 'react'\n\nimport { useTest } from 'src/frontend/hooks'\nimport { ReactChildrenProps } from 'src/types'\n\nexport const Public = (props: ReactChildrenProps): JSX.Element => {\n    const test = useTest()\n\n    return (\n        <div>\n            <div>{test ? 'true' : 'false'}</div>\n            <div>{props.children}</div>\n        </div>\n    )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from 'src/frontend/serviceWorker'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Store } from 'src/frontend/store'\n\nimport 'src/assets/styles/style.scss'\nimport { Public } from './scenes'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <Store>\n                <Public>\n                    <Switch>\n                        <Route exact={true} path=\"/\">\n                            Hello World\n                        </Route>\n                    </Switch>\n                </Public>\n            </Store>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}